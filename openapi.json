{
  "openapi": "3.0.2",
  "info": {
    "title": "GA4GH Discovery Search API",
    "version": "0.1.0",
    "description": "Search is an API for searching biomedical data.\nMore information on:\n- [GitHub Pages](../)\n- [Full Discovery Search Specification](../SEARCHSPEC.html)\n---\n# Overview\nThe primary container for data in the Search API is the **Table**. Tables contain rows of data, where each row is a JSON object with key/value pairs. The table describes the structure of its row objects using [JSON Schema](https://json-schema.org/). Row attributes can take on any legal JSON value, eg. numbers, strings, booleans, nulls, arrays, and nested JSON objects.\nThe API supports browsing and discovery of data models and table metadata, listing table data, and optionally querying table data using arbitrarily complex expressions including joins and aggregations. The query language is SQL with domain specific functions to facilitate informative typing of the result fields. \n",
    "license": {
      "name": "Apache 2.0",
      "url": "https://raw.githubusercontent.com/ga4gh-discovery/ga4gh-discovery-search/develop/LICENSE"
    },
    "contact": {
      "name": "GA4GH Discovery Search Team",
      "email": "ga4gh-discovery-search@ga4gh.org"
    },
    "x-logo": {
      "url": "https://www.ga4gh.org/wp-content/themes/ga4gh-theme/gfx/GA-logo-horizontal-tag-RGB.svg"
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "tags": [
    {
      "description": "The Discovery and Browsing part of the Search API consists of the following REST operations. Concrete examples can be found [here](../SEARCHSPEC#discovery-and-browsing-examples).",
      "name": "Discovery and Browsing"
    },
    {
      "description": "The Query API allows SQL execution through a REST API.\nYou can find some examples requests [here](../SEARCHSPEC#query-example)\n",
      "name": "Query"
    }
  ],
  "paths": {
    "/tables": {
      "get": {
        "summary": "List Tables",
        "description": "Retrieve a paginated list of tables available from this Search API instance.",
        "operationId": "listTables",
        "responses": {
          "200": {
            "description": "A list of Tables",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListTablesResponse"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred"
          }
        },
        "tags": [
          "Discovery and Browsing"
        ]
      }
    },
    "/table/{table_name}/info": {
      "get": {
        "summary": "Get a Table",
        "description": "Returns the information about the Table identified by name.",
        "operationId": "getTable",
        "parameters": [
          {
            "name": "table_name",
            "in": "path",
            "description": "Retrieve the data model associated with the given table",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A Table",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Table"
                }
              }
            }
          },
          "404": {
            "description": "This server does not implement the data operation"
          },
          "500": {
            "description": "An unexpected error occurred"
          }
        },
        "tags": [
          "Discovery and Browsing"
        ]
      }
    },
    "/table/{table_name}/data": {
      "get": {
        "summary": "Fetch data from a Table",
        "description": "Optional operation that returns data from a Table",
        "operationId": "getData",
        "parameters": [
          {
            "name": "table_name",
            "in": "path",
            "description": "Retrieve the data model and data rows (paginated) from the given table",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data from the Table",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableData"
                }
              }
            }
          },
          "404": {
            "description": "This server does not implement the data operation"
          },
          "500": {
            "description": "An unexpected error occurred"
          }
        },
        "tags": [
          "Discovery and Browsing"
        ]
      }
    },
    "/search": {
      "post": {
        "summary": "Perform a search on Tables",
        "description": "Optional operation that accepts a Query and returns a TableData. The result is returned in the same data structure as tables are returned by the discovery and browsing part of the Search API: a TableData object.\n",
        "operationId": "search",
        "responses": {
          "200": {
            "description": "Query results returned as TableData",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableData"
                }
              }
            }
          },
          "404": {
            "description": "This server does not implement the search operation"
          },
          "500": {
            "description": "An unexpected error occurred"
          }
        },
        "tags": [
          "Query"
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "schema#": "{\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n    \"$id\": \"http://json-schema.org/draft-07/schema#\",\n    \"title\": \"Core schema meta-schema\",\n    \"definitions\": {\n        \"schemaArray\": {\n            \"type\": \"array\",\n            \"minItems\": 1,\n            \"items\": { \"$ref\": \"#\" }\n        },\n        \"nonNegativeInteger\": {\n            \"type\": \"integer\",\n            \"minimum\": 0\n        },\n        \"nonNegativeIntegerDefault0\": {\n            \"allOf\": [\n                { \"$ref\": \"#/definitions/nonNegativeInteger\" },\n                { \"default\": 0 }\n            ]\n        },\n        \"simpleTypes\": {\n            \"enum\": [\n                \"array\",\n                \"boolean\",\n                \"integer\",\n                \"null\",\n                \"number\",\n                \"object\",\n                \"string\"\n            ]\n        },\n        \"stringArray\": {\n            \"type\": \"array\",\n            \"items\": { \"type\": \"string\" },\n            \"uniqueItems\": true,\n            \"default\": []\n        }\n    },\n    \"type\": [\"object\", \"boolean\"],\n    \"properties\": {\n        \"$id\": {\n            \"type\": \"string\",\n            \"format\": \"uri-reference\"\n        },\n        \"$schema\": {\n            \"type\": \"string\",\n            \"format\": \"uri\"\n        },\n        \"$ref\": {\n            \"type\": \"string\",\n            \"format\": \"uri-reference\"\n        },\n        \"$comment\": {\n            \"type\": \"string\"\n        },\n        \"title\": {\n            \"type\": \"string\"\n        },\n        \"description\": {\n            \"type\": \"string\"\n        },\n        \"default\": true,\n        \"readOnly\": {\n            \"type\": \"boolean\",\n            \"default\": false\n        },\n        \"writeOnly\": {\n            \"type\": \"boolean\",\n            \"default\": false\n        },\n        \"examples\": {\n            \"type\": \"array\",\n            \"items\": true\n        },\n        \"multipleOf\": {\n            \"type\": \"number\",\n            \"exclusiveMinimum\": 0\n        },\n        \"maximum\": {\n            \"type\": \"number\"\n        },\n        \"exclusiveMaximum\": {\n            \"type\": \"number\"\n        },\n        \"minimum\": {\n            \"type\": \"number\"\n        },\n        \"exclusiveMinimum\": {\n            \"type\": \"number\"\n        },\n        \"maxLength\": { \"$ref\": \"#/definitions/nonNegativeInteger\" },\n        \"minLength\": { \"$ref\": \"#/definitions/nonNegativeIntegerDefault0\" },\n        \"pattern\": {\n            \"type\": \"string\",\n            \"format\": \"regex\"\n        },\n        \"additionalItems\": { \"$ref\": \"#\" },\n        \"items\": {\n            \"anyOf\": [\n                { \"$ref\": \"#\" },\n                { \"$ref\": \"#/definitions/schemaArray\" }\n            ],\n            \"default\": true\n        },\n        \"maxItems\": { \"$ref\": \"#/definitions/nonNegativeInteger\" },\n        \"minItems\": { \"$ref\": \"#/definitions/nonNegativeIntegerDefault0\" },\n        \"uniqueItems\": {\n            \"type\": \"boolean\",\n            \"default\": false\n        },\n        \"contains\": { \"$ref\": \"#\" },\n        \"maxProperties\": { \"$ref\": \"#/definitions/nonNegativeInteger\" },\n        \"minProperties\": { \"$ref\": \"#/definitions/nonNegativeIntegerDefault0\" },\n        \"required\": { \"$ref\": \"#/definitions/stringArray\" },\n        \"additionalProperties\": { \"$ref\": \"#\" },\n        \"definitions\": {\n            \"type\": \"object\",\n            \"additionalProperties\": { \"$ref\": \"#\" },\n            \"default\": {}\n        },\n        \"properties\": {\n            \"type\": \"object\",\n            \"additionalProperties\": { \"$ref\": \"#\" },\n            \"default\": {}\n        },\n        \"patternProperties\": {\n            \"type\": \"object\",\n            \"additionalProperties\": { \"$ref\": \"#\" },\n            \"propertyNames\": { \"format\": \"regex\" },\n            \"default\": {}\n        },\n        \"dependencies\": {\n            \"type\": \"object\",\n            \"additionalProperties\": {\n                \"anyOf\": [\n                    { \"$ref\": \"#\" },\n                    { \"$ref\": \"#/definitions/stringArray\" }\n                ]\n            }\n        },\n        \"propertyNames\": { \"$ref\": \"#\" },\n        \"const\": true,\n        \"enum\": {\n            \"type\": \"array\",\n            \"items\": true,\n            \"minItems\": 1,\n            \"uniqueItems\": true\n        },\n        \"type\": {\n            \"anyOf\": [\n                { \"$ref\": \"#/definitions/simpleTypes\" },\n                {\n                    \"type\": \"array\",\n                    \"items\": { \"$ref\": \"#/definitions/simpleTypes\" },\n                    \"minItems\": 1,\n                    \"uniqueItems\": true\n                }\n            ]\n        },\n        \"format\": { \"type\": \"string\" },\n        \"contentMediaType\": { \"type\": \"string\" },\n        \"contentEncoding\": { \"type\": \"string\" },\n        \"if\": { \"$ref\": \"#\" },\n        \"then\": { \"$ref\": \"#\" },\n        \"else\": { \"$ref\": \"#\" },\n        \"allOf\": { \"$ref\": \"#/definitions/schemaArray\" },\n        \"anyOf\": { \"$ref\": \"#/definitions/schemaArray\" },\n        \"oneOf\": { \"$ref\": \"#/definitions/schemaArray\" },\n        \"not\": { \"$ref\": \"#\" }\n    },\n    \"default\": true\n}\n",
      "Table": {
        "required": [
          "name",
          "data_model"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Table name"
          },
          "description": {
            "type": "string",
            "description": "Optional description of the Table"
          },
          "data_model": {
            "$ref": "#/components/schemas/schema#"
          }
        },
        "description": "Describes a Table hosted by this search node.\n"
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "next_page_url": {
            "type": "string",
            "description": "URL pointing to the next page of the same Table. Null or absent on last page.",
            "format": "uri"
          }
        }
      },
      "ListTablesResponse": {
        "required": [
          "tables"
        ],
        "type": "object",
        "properties": {
          "tables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Table"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "TableData": {
        "required": [
          "data_model",
          "data"
        ],
        "type": "object",
        "properties": {
          "data_model": {
            "$ref": "#/components/schemas/schema#"
          },
          "data": {
            "type": "array",
            "description": "Page of JSON values, each adhering to the schema given in the \"data_model\" property",
            "items": {
              "type": "object"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "description": "A paginated collection of tabular data"
      }
    }
  }
}