<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GA4GH Discovery Search API</title><link>http://example.org/ga4gh-search-docs/</link><description>Recent content on GA4GH Discovery Search API</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://example.org/ga4gh-search-docs/index.xml" rel="self" type="application/rss+xml"/><item><title>At the data source</title><link>http://example.org/ga4gh-search-docs/docs/security/data-source/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/ga4gh-search-docs/docs/security/data-source/</guid><description>Securing the Search data sources Search is backend agnostic by design; this means we do not suggest a specific implementation as correct. On this page, we will attempt to bring up some options for you to consider.
Using access controls of the data source Whether your data is stored in a database like MySQL and PostgreSQL, or hosted solutions like Google Cloud Storage, the database will likely offer some form of access control.</description></item><item><title>At the search endpoint</title><link>http://example.org/ga4gh-search-docs/docs/security/search-endpoint/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/ga4gh-search-docs/docs/security/search-endpoint/</guid><description>Securing the Search endpoint The endpoint should be secured according to the GA4GH Passports and Visas standard as suggested by the GA4GH Data Use and Researcher ID workstream.</description></item><item><title>Introduction</title><link>http://example.org/ga4gh-search-docs/docs/getting-started/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/ga4gh-search-docs/docs/getting-started/introduction/</guid><description>{row-divider}
The GA4GH Search API The GA4GH Search API specification describes a simple, uniform mechanism to publish, discover, query, and analyze biomedical data. Any “rectangular” data that fits into rows and columns can be represented by GA4GH Search.
Search API for data custodians Search API is a perfect solution for data custodians looking to make their biomedical data discoverable and searchable.
The API is minimalistic by design, which also means minimal resistance to adoption.</description></item><item><title>Pagination and Long Running Queries</title><link>http://example.org/ga4gh-search-docs/docs/reference/pagination-long-queries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/ga4gh-search-docs/docs/reference/pagination-long-queries/</guid><description>Pagination sequence
A pagination sequence is the singly-linked list of URLs formed by following the next_page_url property of the pagination section of an initial TableData or ListTablesResponse. A pagination sequence begins at the first response returned from any request that yields a TableData or ListTablesResponse, and ends at the page in the sequence whose pagination property is omitted, whose pagination.next_page_url is omitted, or whose pagination.next_page_url is null.
Servers may return a unique pagination sequence in response to successive requests for the same query, table data listing, or table listing.</description></item><item><title>Retrofit data explorers</title><link>http://example.org/ga4gh-search-docs/docs/use-exisitng-data/retrofit-a-data-explorer/doc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/ga4gh-search-docs/docs/use-exisitng-data/retrofit-a-data-explorer/doc/</guid><description>{row-divider}
MSSNG We&amp;rsquo;re working on it!
{divider} Files ├── content│ ├── category folder│ │ ├── sub-category folder│ │ │ └──_index.md│ │ └── _index.md│ ├── another category | The code snippet is pulled from this page</description></item><item><title>SQL Functions</title><link>http://example.org/ga4gh-search-docs/docs/reference/sql-functions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/ga4gh-search-docs/docs/reference/sql-functions/</guid><description>GA4GH Search API’s SQL dialect has been selected for compatibility with current major open source database platforms including Presto SQL, PostgreSQL, and MySQL, and BigQuery. There are occasional name or signature differences, but a GA4GH Search API implementation atop any of the major database platforms should be able to pass through queries that use the functions listed below with only minor tweaks.
The functions below are a subset of those available in PrestoSQL 341.</description></item><item><title>SQL Grammar</title><link>http://example.org/ga4gh-search-docs/docs/reference/sql-grammar/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/ga4gh-search-docs/docs/reference/sql-grammar/</guid><description>This is the ANTLR grammar from Presto SQL version 323 (ASL 2.0 license), with the DML and DDL parts removed.
grammar DiscoverySearch; tokens { DELIMITER } singleStatement : statement EOF ; standaloneExpression : expression EOF ; standaloneType : type EOF ; statement : query #statementDefault | USE schema=identifier #use | USE catalog=identifier &amp;#39;.&amp;#39; schema=identifier #use | EXPLAIN ANALYZE? VERBOSE? (&amp;#39;(&amp;#39; explainOption (&amp;#39;,&amp;#39; explainOption)* &amp;#39;)&amp;#39;)? statement #explain | SHOW TABLES ((FROM | IN) qualifiedName)?</description></item><item><title>Tables-in-a-bucket</title><link>http://example.org/ga4gh-search-docs/docs/use-exisitng-data/tables-in-a-bucket/doc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/ga4gh-search-docs/docs/use-exisitng-data/tables-in-a-bucket/doc/</guid><description>What is a phenopacket? Phenopacket is a GA4GH approved standard file format for sharing phenotypic information.
Find documentation for phenopackets-schema here.
What does it contain? A set of mandatory and optional fields to share information about a patient or participant’s phenotype Optional fields may include clinical diagnosis, age of onset, results from lab tests, and disease severity. An example of the JSON structure can be found here.
Preparing the data into a GA4GH Search application If you need some phenopackets data to follow this example, consider the following:</description></item><item><title>Using Presto</title><link>http://example.org/ga4gh-search-docs/docs/use-exisitng-data/using-preso/doc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/ga4gh-search-docs/docs/use-exisitng-data/using-preso/doc/</guid><description>The dbGaP GECCO example In the provision data section, we&amp;rsquo;ve shown a quick start recipe with the ga4gh-search-adapter-presto docker container connected to a Presto instance hosted at https://presto-public.prod.dnastack.com. This section provides more information on how this was accomplished.
Quick Links ga4gh-search-adapter-presto
Open API 3 Reference
Full GA4GH Search Specification
Table Object Specification
Search API’s SQL dialect
Prerequisites The following is required before we start.
Java 11+ A Presto server you can access anonymously over HTTP(S).</description></item><item><title>Provision Data</title><link>http://example.org/ga4gh-search-docs/docs/getting-started/provision-data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/ga4gh-search-docs/docs/getting-started/provision-data/</guid><description>{row-divider}
Implementation The GA4GH API requires table operations to be implemented to specification for basic discovery and browsing.
Optional but not required, query operations may be implemented to support querying with SQL.
The Search API is backend agnostic, which means any solution that implements the API specification is valid. You can use your favorite REST application frameworks to implement GA4GH Search Endpoints or a hosted blob store for a tables-in-a-bucket implementation requiring no code.</description></item><item><title>Consume Data</title><link>http://example.org/ga4gh-search-docs/docs/getting-started/consume-data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/ga4gh-search-docs/docs/getting-started/consume-data/</guid><description>{row-divider}
Browsing The minimum Search API implementations will support browsing by table. This means these operations from the API specs are supported for table by table browsing.
On the right is example code to browse the tables-in-a-bucket implementation of Search. {divider} Python R CLI Follow along in Colab
# init search client from search_python_client.search import DrsClient, SearchClient base_url_tiab = &amp;#39;https://storage.googleapis.com/ga4gh-tables-example/&amp;#39; search_client_tiab = SearchClient(base_url=base_url_tiab) # get tables tables_iterator = search_client_tiab.</description></item><item><title>Upload results</title><link>http://example.org/ga4gh-search-docs/docs/getting-started/upload-result/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/ga4gh-search-docs/docs/getting-started/upload-result/</guid><description>{row-divider}
We&amp;rsquo;re working on it!</description></item></channel></rss>